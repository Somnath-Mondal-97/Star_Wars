{"ast":null,"code":"var _jsxFileName = \"D:\\\\Aquera Internship\\\\Frontend\\\\my-app\\\\src\\\\Pages\\\\ResidentPage\\\\ResidentPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResidentPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the ID from the URL params\n  const [resident, setResident] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/people/${getResidentIdFromUrl(id)}/`) // Use the extracted ID from the URL\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch resident details');\n      }\n      return response.json();\n    }).then(data => {\n      setResident(data);\n    }).catch(error => {\n      console.error('Error fetching resident details:', error);\n      setError(error.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [id]);\n\n  // Function to extract the ID from the resident URL\n  const getResidentIdFromUrl = url => {\n    const parts = url.split('/');\n    return parts[parts.length - 2]; // Assuming the ID is the second-to-last part of the URL\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n  if (!resident) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No resident found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: resident.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Height: \", resident.height]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Mass: \", resident.mass]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gender: \", resident.gender]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(ResidentPage, \"Lnr3gOyj8Gk9yy+obvH35LPVAjk=\", false, function () {\n  return [useParams];\n});\n_c = ResidentPage;\nexport default ResidentPage;\nvar _c;\n$RefreshReg$(_c, \"ResidentPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","ResidentPage","_s","id","resident","setResident","loading","setLoading","error","setError","fetch","getResidentIdFromUrl","then","response","ok","Error","json","data","catch","console","message","finally","url","parts","split","length","children","fileName","_jsxFileName","lineNumber","columnNumber","name","height","mass","gender","_c","$RefreshReg$"],"sources":["D:/Aquera Internship/Frontend/my-app/src/Pages/ResidentPage/ResidentPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ResidentPage = () => {\r\n    const { id } = useParams(); // Get the ID from the URL params\r\n    const [resident, setResident] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(`https://swapi.dev/api/people/${getResidentIdFromUrl(id)}/`) // Use the extracted ID from the URL\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch resident details');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setResident(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching resident details:', error);\r\n                setError(error.message);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }, [id]);\r\n\r\n    // Function to extract the ID from the resident URL\r\n    const getResidentIdFromUrl = (url) => {\r\n        const parts = url.split('/');\r\n        return parts[parts.length - 2]; // Assuming the ID is the second-to-last part of the URL\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    if (!resident) {\r\n        return <div>No resident found</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{resident.name}</h2>\r\n            <p>Height: {resident.height}</p>\r\n            <p>Mass: {resident.mass}</p>\r\n            <p>Gender: {resident.gender}</p>\r\n            {/* Add more details as needed */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResidentPage;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZc,KAAK,CAAE,gCAA+BC,oBAAoB,CAACR,EAAE,CAAE,GAAE,CAAC,CAAC;IAAA,CAC9DS,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACvD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACVZ,WAAW,CAACY,IAAI,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACV,KAAK,IAAI;MACZW,OAAO,CAACX,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDC,QAAQ,CAACD,KAAK,CAACY,OAAO,CAAC;IAC3B,CAAC,CAAC,CACDC,OAAO,CAAC,MAAM;MACXd,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACV,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;;EAER;EACA,MAAMQ,oBAAoB,GAAIW,GAAG,IAAK;IAClC,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC5B,OAAOD,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,IAAInB,OAAO,EAAE;IACT,oBAAON,OAAA;MAAA0B,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAItB,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAA0B,QAAA,GAAK,SAAO,EAAClB,KAAK;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACpC;EAEA,IAAI,CAAC1B,QAAQ,EAAE;IACX,oBAAOJ,OAAA;MAAA0B,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvC;EAEA,oBACI9B,OAAA;IAAA0B,QAAA,gBACI1B,OAAA;MAAA0B,QAAA,EAAKtB,QAAQ,CAAC2B;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxB9B,OAAA;MAAA0B,QAAA,GAAG,UAAQ,EAACtB,QAAQ,CAAC4B,MAAM;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC9B,OAAA;MAAA0B,QAAA,GAAG,QAAM,EAACtB,QAAQ,CAAC6B,IAAI;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B9B,OAAA;MAAA0B,QAAA,GAAG,UAAQ,EAACtB,QAAQ,CAAC8B,MAAM;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE/B,CAAC;AAEd,CAAC;AAAC5B,EAAA,CArDID,YAAY;EAAA,QACCH,SAAS;AAAA;AAAAqC,EAAA,GADtBlC,YAAY;AAuDlB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}