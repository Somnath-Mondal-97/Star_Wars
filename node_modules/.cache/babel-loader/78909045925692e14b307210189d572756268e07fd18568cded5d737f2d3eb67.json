{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Link,useParams}from'react-router-dom';import'./IndividualPlanet.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const IndividualPlanet=()=>{const{id}=useParams();const[planet,setPlanet]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[relatedPeople,setRelatedPeople]=useState([]);const[names,setNames]=useState([]);useEffect(()=>{const fetchPlanetDetails=async()=>{try{const response=await fetch(\"https://swapi.dev/api/planets/\".concat(id,\"/\"));if(!response.ok){throw new Error('Failed to fetch planet details');}const data=await response.json();setPlanet(data);setRelatedPeople(data.residents);}catch(error){console.error('Error fetching planet details:',error);setError(error.message);}finally{setLoading(false);}};fetchPlanetDetails();},[id]);useEffect(()=>{const fetchNames=async()=>{setLoading(true);const names=[];for(const residentURL of relatedPeople){try{const response=await fetch(residentURL);if(!response.ok){throw new Error('Failed to fetch resident details');}const data=await response.json();names.push(data.name);}catch(error){console.error('Error fetching resident details:',error);names.push('Unknown Resident');}}setNames(names);setLoading(false);};if(relatedPeople.length>0){fetchNames();}},[relatedPeople]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:\"Loading...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[\"Error: \",error]});}if(!planet){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:\"No planet found\"});}return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"container mt-5\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row planet-details\",children:[/*#__PURE__*/_jsx(\"h2\",{children:planet.name}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Rotation Period: \",planet.rotation_period]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Orbital Period: \",planet.orbital_period]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Diameter: \",planet.diameter]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Climate: \",planet.climate]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Gravity: \",planet.gravity]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Terrain: \",planet.terrain]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Surface Water: \",planet.surface_water]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Population: \",planet.population]}),relatedPeople.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"person-div\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Related People:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"person-inner-div\",children:relatedPeople.map((residentURL,index)=>{const residentId=residentURL.split(\"/\").filter(Boolean).pop();const name=names[index]||'Unknown Resident';return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Link,{to:\"/person/\".concat(residentId),className:\"people-links\",children:/*#__PURE__*/_jsx(\"h4\",{children:name})})},index);})})]})]})})});};export default IndividualPlanet;","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","jsx","_jsx","jsxs","_jsxs","IndividualPlanet","id","planet","setPlanet","loading","setLoading","error","setError","relatedPeople","setRelatedPeople","names","setNames","fetchPlanetDetails","response","fetch","concat","ok","Error","data","json","residents","console","message","fetchNames","residentURL","push","name","length","className","children","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","map","index","residentId","split","filter","Boolean","pop","to"],"sources":["D:/Aquera Internship/Frontend/my-app/src/Pages/IndividualPlanet/IndividualPlanet.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport './IndividualPlanet.css';\r\n\r\nconst IndividualPlanet = () => {\r\n    const { id } = useParams();\r\n    const [planet, setPlanet] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [relatedPeople, setRelatedPeople] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPlanetDetails = async () => {\r\n            try {\r\n                const response = await fetch(`https://swapi.dev/api/planets/${id}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch planet details');\r\n                }\r\n                const data = await response.json();\r\n                setPlanet(data);\r\n                setRelatedPeople(data.residents);\r\n            } catch (error) {\r\n                console.error('Error fetching planet details:', error);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPlanetDetails();\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        const fetchNames = async () => {\r\n            setLoading(true); \r\n            const names = [];\r\n            for (const residentURL of relatedPeople) {\r\n                try {\r\n                    const response = await fetch(residentURL);\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to fetch resident details');\r\n                    }\r\n                    const data = await response.json();\r\n                    names.push(data.name);\r\n                } catch (error) {\r\n                    console.error('Error fetching resident details:', error);\r\n                    names.push('Unknown Resident');\r\n                }\r\n            }\r\n            setNames(names);\r\n            setLoading(false); \r\n        };\r\n\r\n        if (relatedPeople.length > 0) {\r\n            fetchNames();\r\n        }\r\n    }, [relatedPeople]);\r\n\r\n    if (loading) {\r\n        return <div className='container'>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className='container'>Error: {error}</div>;\r\n    }\r\n\r\n    if (!planet) {\r\n        return <div className='container'>No planet found</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row planet-details\">\r\n                    <h2>{planet.name}</h2>\r\n                    <h3>Rotation Period: {planet.rotation_period}</h3>\r\n                    <h3>Orbital Period: {planet.orbital_period}</h3>\r\n                    <h3>Diameter: {planet.diameter}</h3>\r\n                    <h3>Climate: {planet.climate}</h3>\r\n                    <h3>Gravity: {planet.gravity}</h3>\r\n                    <h3>Terrain: {planet.terrain}</h3>\r\n                    <h3>Surface Water: {planet.surface_water}</h3>\r\n                    <h3>Population: {planet.population}</h3>\r\n                    {relatedPeople.length > 0 && (\r\n                        <div className='person-div'>\r\n                            <h3>Related People:</h3>\r\n                            <div className='person-inner-div'>\r\n                            {relatedPeople.map((residentURL, index) => {\r\n                                const residentId = residentURL.split(\"/\").filter(Boolean).pop(); \r\n                                const name = names[index] || 'Unknown Resident'; \r\n                                return (\r\n                                    <div key={index}>\r\n                                        <Link to={`/person/${residentId}`} className='people-links'>\r\n                                            <h4>{name}</h4>\r\n                                        </Link>\r\n                                    </div>\r\n                                );\r\n                            })}</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualPlanet;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}