{"ast":null,"code":"var _jsxFileName = \"D:\\\\Aquera Internship\\\\Frontend\\\\my-app\\\\src\\\\Pages\\\\IndividualPlanet\\\\IndividualPlanet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport './IndividualPlanet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualPlanet = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [planet, setPlanet] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedPeople, setRelatedPeople] = useState([]);\n  useEffect(() => {\n    const fetchPlanetDetails = async () => {\n      try {\n        const response = await fetch(`https://swapi.dev/api/planets/${id}/`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch planet details');\n        }\n        const data = await response.json();\n        setPlanet(data);\n        setRelatedPeople(data.residents);\n      } catch (error) {\n        console.error('Error fetching planet details:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlanetDetails();\n  }, [id]);\n  useEffect(() => {\n    const fetchResidentNames = async () => {\n      const names = await Promise.all(relatedPeople.map(async residentURL => {\n        try {\n          const response = await fetch(residentURL);\n          if (!response.ok) {\n            throw new Error('Failed to fetch resident details');\n          }\n          const data = await response.json();\n          return data.name;\n        } catch (error) {\n          console.error('Error fetching resident details:', error);\n          return 'Unknown Resident';\n        }\n      }));\n      setRelatedPeople(names);\n    };\n    if (relatedPeople.length > 0) {\n      fetchResidentNames();\n    }\n  }, [relatedPeople]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n  if (!planet) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"No planet found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row planet-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: planet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rotation Period : \", planet.rotation_period]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Orbital Period : \", planet.orbital_period]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Diameter : \", planet.diameter]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Climate : \", planet.climate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Gravity : \", planet.gravity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Terrain : \", planet.terrain]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Surface Water : \", planet.surface_water]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Population : \", planet.population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), relatedPeople.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"person-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Related People:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), relatedPeople.map((name, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/person/${index + 1}`,\n              className: \"people-links\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualPlanet, \"gQaVeVTfpp0Dt3bLCI8ReZYJP8w=\", false, function () {\n  return [useParams];\n});\n_c = IndividualPlanet;\nexport default IndividualPlanet;\nvar _c;\n$RefreshReg$(_c, \"IndividualPlanet\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","jsxDEV","_jsxDEV","IndividualPlanet","_s","id","planet","setPlanet","loading","setLoading","error","setError","relatedPeople","setRelatedPeople","fetchPlanetDetails","response","fetch","ok","Error","data","json","residents","console","message","fetchResidentNames","names","Promise","all","map","residentURL","name","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","index","to","_c","$RefreshReg$"],"sources":["D:/Aquera Internship/Frontend/my-app/src/Pages/IndividualPlanet/IndividualPlanet.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport './IndividualPlanet.css';\r\n\r\nconst IndividualPlanet = () => {\r\n    const { id } = useParams();\r\n    const [planet, setPlanet] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [relatedPeople, setRelatedPeople] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPlanetDetails = async () => {\r\n            try {\r\n                const response = await fetch(`https://swapi.dev/api/planets/${id}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch planet details');\r\n                }\r\n                const data = await response.json();\r\n                setPlanet(data);\r\n                setRelatedPeople(data.residents);\r\n            } catch (error) {\r\n                console.error('Error fetching planet details:', error);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPlanetDetails();\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        const fetchResidentNames = async () => {\r\n            const names = await Promise.all(\r\n                relatedPeople.map(async (residentURL) => {\r\n                    try {\r\n                        const response = await fetch(residentURL);\r\n                        if (!response.ok) {\r\n                            throw new Error('Failed to fetch resident details');\r\n                        }\r\n                        const data = await response.json();\r\n                        return data.name;\r\n                    } catch (error) {\r\n                        console.error('Error fetching resident details:', error);\r\n                        return 'Unknown Resident';\r\n                    }\r\n                })\r\n            );\r\n            setRelatedPeople(names);\r\n        };\r\n\r\n        if (relatedPeople.length > 0) {\r\n            fetchResidentNames();\r\n        }\r\n    }, [relatedPeople]);\r\n\r\n    if (loading) {\r\n        return <div className='container'>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className='container'>Error: {error}</div>;\r\n    }\r\n\r\n    if (!planet) {\r\n        return <div className='container'>No planet found</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row planet-details\">\r\n                    <h2>{planet.name}</h2>\r\n                    <h3>Rotation Period : {planet.rotation_period}</h3>\r\n                    <h3>Orbital Period : {planet.orbital_period}</h3>\r\n                    <h3>Diameter : {planet.diameter}</h3>\r\n                    <h3>Climate : {planet.climate}</h3>\r\n                    <h3>Gravity : {planet.gravity}</h3>\r\n                    <h3>Terrain : {planet.terrain}</h3>\r\n                    <h3>Surface Water : {planet.surface_water}</h3>\r\n                    <h3>Population : {planet.population}</h3>\r\n                    {relatedPeople.length > 0 && (\r\n                        <div className='person-div'>\r\n                            <h3>Related People:</h3>\r\n                            {relatedPeople.map((name, index) => (\r\n                                <div key={index}>\r\n                                    <Link to={`/person/${index + 1}`} className='people-links'>\r\n                                        <h4>{index+1}</h4>\r\n                                        <h6>{name}</h6>\r\n                                    </Link>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualPlanet;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}