{"ast":null,"code":"var _jsxFileName = \"D:\\\\Aquera Internship\\\\Frontend\\\\my-app\\\\src\\\\Pages\\\\IndividualPlanet\\\\IndividualPlanet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport './IndividualPlanet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualPlanet = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [planet, setPlanet] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedPeople, setRelatedPeople] = useState([]);\n  const [names, setNames] = useState([]);\n  useEffect(() => {\n    const fetchPlanetDetails = async () => {\n      try {\n        const response = await fetch(`https://swapi.dev/api/planets/${id}/`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch planet details');\n        }\n        const data = await response.json();\n        setPlanet(data);\n        setRelatedPeople(data.residents);\n      } catch (error) {\n        console.error('Error fetching planet details:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlanetDetails();\n  }, [id]);\n  useEffect(() => {\n    const fetchNames = async () => {\n      setLoading(true); // Set loading state while fetching names\n      const names = [];\n      for (const residentURL of relatedPeople) {\n        try {\n          const response = await fetch(residentURL);\n          if (!response.ok) {\n            throw new Error('Failed to fetch resident details');\n          }\n          const data = await response.json();\n          names.push(data.name);\n        } catch (error) {\n          console.error('Error fetching resident details:', error);\n          names.push('Unknown Resident');\n        }\n      }\n      setNames(names);\n      setLoading(false); // Reset loading state after fetching names\n    };\n    if (relatedPeople.length > 0) {\n      fetchNames();\n    }\n  }, [relatedPeople]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }\n  if (!planet) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"No planet found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row planet-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: planet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rotation Period: \", planet.rotation_period]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Orbital Period: \", planet.orbital_period]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Diameter: \", planet.diameter]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Climate: \", planet.climate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Gravity: \", planet.gravity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Terrain: \", planet.terrain]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Surface Water: \", planet.surface_water]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Population: \", planet.population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), relatedPeople.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"person-div\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Related People:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), relatedPeople.map((residentURL, index) => {\n            const residentId = residentURL.split(\"/\").filter(Boolean).pop(); // Extract ID from resident URL\n            const name = names[index] || 'Unknown Resident'; // Get the name corresponding to the current index\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/person/${residentId}`,\n                className: \"people-links\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 41\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(IndividualPlanet, \"BjOzsQUcRJ7jKaeKq4vNPOvzhOg=\", false, function () {\n  return [useParams];\n});\n_c = IndividualPlanet;\nexport default IndividualPlanet;\nvar _c;\n$RefreshReg$(_c, \"IndividualPlanet\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","jsxDEV","_jsxDEV","IndividualPlanet","_s","id","planet","setPlanet","loading","setLoading","error","setError","relatedPeople","setRelatedPeople","names","setNames","fetchPlanetDetails","response","fetch","ok","Error","data","json","residents","console","message","fetchNames","residentURL","push","name","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","map","index","residentId","split","filter","Boolean","pop","to","_c","$RefreshReg$"],"sources":["D:/Aquera Internship/Frontend/my-app/src/Pages/IndividualPlanet/IndividualPlanet.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport './IndividualPlanet.css';\r\n\r\nconst IndividualPlanet = () => {\r\n    const { id } = useParams();\r\n    const [planet, setPlanet] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [relatedPeople, setRelatedPeople] = useState([]);\r\n    const [names, setNames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPlanetDetails = async () => {\r\n            try {\r\n                const response = await fetch(`https://swapi.dev/api/planets/${id}/`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch planet details');\r\n                }\r\n                const data = await response.json();\r\n                setPlanet(data);\r\n                setRelatedPeople(data.residents);\r\n            } catch (error) {\r\n                console.error('Error fetching planet details:', error);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchPlanetDetails();\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        const fetchNames = async () => {\r\n            setLoading(true); // Set loading state while fetching names\r\n            const names = [];\r\n            for (const residentURL of relatedPeople) {\r\n                try {\r\n                    const response = await fetch(residentURL);\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to fetch resident details');\r\n                    }\r\n                    const data = await response.json();\r\n                    names.push(data.name);\r\n                } catch (error) {\r\n                    console.error('Error fetching resident details:', error);\r\n                    names.push('Unknown Resident');\r\n                }\r\n            }\r\n            setNames(names);\r\n            setLoading(false); // Reset loading state after fetching names\r\n        };\r\n\r\n        if (relatedPeople.length > 0) {\r\n            fetchNames();\r\n        }\r\n    }, [relatedPeople]);\r\n\r\n    if (loading) {\r\n        return <div className='container'>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className='container'>Error: {error}</div>;\r\n    }\r\n\r\n    if (!planet) {\r\n        return <div className='container'>No planet found</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row planet-details\">\r\n                    <h2>{planet.name}</h2>\r\n                    <h3>Rotation Period: {planet.rotation_period}</h3>\r\n                    <h3>Orbital Period: {planet.orbital_period}</h3>\r\n                    <h3>Diameter: {planet.diameter}</h3>\r\n                    <h3>Climate: {planet.climate}</h3>\r\n                    <h3>Gravity: {planet.gravity}</h3>\r\n                    <h3>Terrain: {planet.terrain}</h3>\r\n                    <h3>Surface Water: {planet.surface_water}</h3>\r\n                    <h3>Population: {planet.population}</h3>\r\n                    {relatedPeople.length > 0 && (\r\n                        <div className='person-div'>\r\n                            <h3>Related People:</h3>\r\n                            {relatedPeople.map((residentURL, index) => {\r\n                                const residentId = residentURL.split(\"/\").filter(Boolean).pop(); // Extract ID from resident URL\r\n                                const name = names[index] || 'Unknown Resident'; // Get the name corresponding to the current index\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <Link to={`/person/${residentId}`} className='people-links'>\r\n                                            <h4>{name}</h4>\r\n                                        </Link>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndividualPlanet;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}